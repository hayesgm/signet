defmodule Signet.Contract.Sleuth do
  @moduledoc ~S"""
  This module was auto-generated by Signet. Any changes may be lost.

  See `mix help signet.gen` for more information.
  """
  use Signet.Hex

  def contract_name do
    "Sleuth"
  end

  def query_selector() do
    %ABI.FunctionSelector{
      function: "query",
      function_type: :function,
      state_mutability: :nonpayable,
      types: [%{name: "q", type: :bytes}, %{name: "c", type: :bytes}],
      returns: [%{name: "", type: :bytes}]
    }
  end

  def encode_query(q, c) do
    ABI.encode(query_selector(), [q, c])
  end

  def prepare_query(contract, q, c, opts \\ []) do
    Signet.RPC.prepare_trx(contract, encode_query(q, c), opts)
  end

  def build_trx_query(contract, q, c) do
    %Signet.Transaction.V2{destination: contract, data: encode_query(q, c)}
  end

  def call_query(contract, q, c, opts \\ []) do
    Signet.RPC.call_trx(build_trx_query(contract, q, c), opts)
  end

  def estimate_gas_query(contract, q, c, opts \\ []) do
    Signet.RPC.estimate_gas(build_trx_query(contract, q, c), opts)
  end

  def execute_query(contract, q, c, opts \\ []) do
    Signet.RPC.execute_trx(contract, encode_query(q, c), opts)
  end

  def decode_query_call(<<52, 104, 110, 175>> <> calldata) do
    ABI.decode(query_selector(), calldata)
  end

  def query_ed815d83_selector() do
    %ABI.FunctionSelector{
      function: "query",
      function_type: :function,
      state_mutability: :nonpayable,
      types: [%{name: "q", type: :bytes}],
      returns: [%{name: "", type: :bytes}]
    }
  end

  def encode_query_ed815d83(q) do
    ABI.encode(query_ed815d83_selector(), [q])
  end

  def prepare_query_ed815d83(contract, q, opts \\ []) do
    Signet.RPC.prepare_trx(contract, encode_query_ed815d83(q), opts)
  end

  def build_trx_query_ed815d83(contract, q) do
    %Signet.Transaction.V2{destination: contract, data: encode_query_ed815d83(q)}
  end

  def call_query_ed815d83(contract, q, opts \\ []) do
    Signet.RPC.call_trx(build_trx_query_ed815d83(contract, q), opts)
  end

  def estimate_gas_query_ed815d83(contract, q, opts \\ []) do
    Signet.RPC.estimate_gas(build_trx_query_ed815d83(contract, q), opts)
  end

  def execute_query_ed815d83(contract, q, opts \\ []) do
    Signet.RPC.execute_trx(contract, encode_query_ed815d83(q), opts)
  end

  def decode_query_ed815d83_call(<<237, 129, 93, 131>> <> calldata) do
    ABI.decode(query_ed815d83_selector(), calldata)
  end

  def decode_call(calldata = <<52, 104, 110, 175>> <> _) do
    {:ok, {"query", decode_query_call(calldata)}}
  end

  def decode_call(calldata = <<237, 129, 93, 131>> <> _) do
    {:ok, {"query", decode_query_ed815d83_call(calldata)}}
  end

  def decode_call(_) do
    :not_found
  end

  def decode_event(_) do
    :not_found
  end

  def decode_error(_) do
    :not_found
  end

  def bytecode() do
    hex!(
      "0x608060405234801561001057600080fd5b50610372806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806334686eaf1461003b578063ed815d8314610064575b600080fd5b61004e6100493660046101d0565b610077565b60405161005b91906102ab565b60405180910390f35b61004e6100723660046102fa565b6100c2565b60606100ba84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250869250610134915050565b949350505050565b606061012d83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805160048152602481019091526020810180516001600160e01b0316632c46b20560e01b17905291506101349050565b9392505050565b606082516020840181816000f0915050825160208401600060c083836000875af1505050503d600060c03e60206080523d60a05260403d01806080f35b60008083601f84011261018357600080fd5b50813567ffffffffffffffff81111561019b57600080fd5b6020830191508360208285010111156101b357600080fd5b9250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000604084860312156101e557600080fd5b833567ffffffffffffffff808211156101fd57600080fd5b61020987838801610171565b9095509350602086013591508082111561022257600080fd5b818601915086601f83011261023657600080fd5b813581811115610248576102486101ba565b604051601f8201601f19908116603f01168101908382118183101715610270576102706101ba565b8160405282815289602084870101111561028957600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60006020808352835180602085015260005b818110156102d9578581018301518582016040015282016102bd565b506000604082860101526040601f19601f8301168501019250505092915050565b6000806020838503121561030d57600080fd5b823567ffffffffffffffff81111561032457600080fd5b61033085828601610171565b9096909550935050505056fea26469706673582212200f9418a6a5451abfd0a2638ad5d50fa97ed7004227bad65194b24b2f47e2241364736f6c63430008170033"
    )
  end

  def deployed_bytecode() do
    hex!(
      "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806334686eaf1461003b578063ed815d8314610064575b600080fd5b61004e6100493660046101d0565b610077565b60405161005b91906102ab565b60405180910390f35b61004e6100723660046102fa565b6100c2565b60606100ba84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250869250610134915050565b949350505050565b606061012d83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805160048152602481019091526020810180516001600160e01b0316632c46b20560e01b17905291506101349050565b9392505050565b606082516020840181816000f0915050825160208401600060c083836000875af1505050503d600060c03e60206080523d60a05260403d01806080f35b60008083601f84011261018357600080fd5b50813567ffffffffffffffff81111561019b57600080fd5b6020830191508360208285010111156101b357600080fd5b9250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000604084860312156101e557600080fd5b833567ffffffffffffffff808211156101fd57600080fd5b61020987838801610171565b9095509350602086013591508082111561022257600080fd5b818601915086601f83011261023657600080fd5b813581811115610248576102486101ba565b604051601f8201601f19908116603f01168101908382118183101715610270576102706101ba565b8160405282815289602084870101111561028957600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60006020808352835180602085015260005b818110156102d9578581018301518582016040015282016102bd565b506000604082860101526040601f19601f8301168501019250505092915050565b6000806020838503121561030d57600080fd5b823567ffffffffffffffff81111561032457600080fd5b61033085828601610171565b9096909550935050505056fea26469706673582212200f9418a6a5451abfd0a2638ad5d50fa97ed7004227bad65194b24b2f47e2241364736f6c63430008170033"
    )
  end
end
